{"code":"var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar Player = /** @class */ (function () {\r\n    function Player() {\r\n    }\r\n    Player.create = function (dp) {\r\n        switch (dp.charAt(0)) {\r\n            case \"w\":\r\n                return new Red();\r\n            case \"g\":\r\n                return new Blue();\r\n            case \"b\":\r\n                return new Yellow();\r\n            case \"r\":\r\n                return new Green();\r\n            case \"d\":\r\n                return new Dead();\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n    return Player;\r\n}());\r\nvar Red = /** @class */ (function (_super) {\r\n    __extends(Red, _super);\r\n    function Red() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Red\";\r\n        _this.turn = 1;\r\n        return _this;\r\n    }\r\n    Red.prototype.rotate = function (x, y, x1, y1) {\r\n        return [x + x1, y + y1];\r\n    };\r\n    return Red;\r\n}(Player));\r\nvar Blue = /** @class */ (function (_super) {\r\n    __extends(Blue, _super);\r\n    function Blue() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Blue\";\r\n        _this.turn = 2;\r\n        return _this;\r\n    }\r\n    Blue.prototype.rotate = function (x, y, x1, y1) {\r\n        return [x + y1, y - x1];\r\n    };\r\n    return Blue;\r\n}(Player));\r\nvar Yellow = /** @class */ (function (_super) {\r\n    __extends(Yellow, _super);\r\n    function Yellow() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Yellow\";\r\n        _this.turn = 3;\r\n        return _this;\r\n    }\r\n    Yellow.prototype.rotate = function (x, y, x1, y1) {\r\n        return [x - x1, y - y1];\r\n    };\r\n    return Yellow;\r\n}(Player));\r\nvar Green = /** @class */ (function (_super) {\r\n    __extends(Green, _super);\r\n    function Green() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Green\";\r\n        _this.turn = 4;\r\n        return _this;\r\n    }\r\n    Green.prototype.rotate = function (x, y, x1, y1) {\r\n        return [x - y1, y + x1];\r\n    };\r\n    return Green;\r\n}(Player));\r\nvar Dead = /** @class */ (function (_super) {\r\n    __extends(Dead, _super);\r\n    function Dead() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Dead\";\r\n        _this.turn = 0;\r\n        return _this;\r\n    }\r\n    Dead.prototype.rotate = function (x, y) {\r\n        throw new Error(\"Not implemented\");\r\n    };\r\n    return Dead;\r\n}(Player));\r\nvar Vector = /** @class */ (function () {\r\n    function Vector(x1, y1) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n    }\r\n    return Vector;\r\n}());\r\nvar Radius = /** @class */ (function () {\r\n    function Radius(max) {\r\n        this.counter = 0;\r\n        this.max = max;\r\n    }\r\n    Radius.prototype.next = function () {\r\n        if (!this.max || this.counter < this.max) {\r\n            this.counter++;\r\n            return {\r\n                value: this.counter,\r\n                done: false\r\n            };\r\n        }\r\n        else {\r\n            this.counter = 0;\r\n            return {\r\n                value: undefined,\r\n                done: true\r\n            };\r\n        }\r\n    };\r\n    Radius.prototype.reset = function () {\r\n        this.counter = 0;\r\n    };\r\n    return Radius;\r\n}());\r\nvar Piece = /** @class */ (function () {\r\n    function Piece(dp, code) {\r\n        this.coords = Square.coords(code);\r\n        this.player = Player.create(dp);\r\n        this.dp = dp;\r\n    }\r\n    Piece.prototype.moved = function () {\r\n        var moved = true;\r\n        for (var i = 0; i < this.home.length; i++) {\r\n            var m1 = this.home[i][0] - 6.5;\r\n            var n1 = this.home[i][1] - 6.5;\r\n            var _a = this.player.rotate(6.5, 6.5, n1, m1), x2 = _a[0], y2 = _a[1];\r\n            if (this.coords[1] === x2 &&\r\n                this.coords[0] === y2) {\r\n                moved = false;\r\n                break;\r\n            }\r\n        }\r\n        return moved;\r\n    };\r\n    Piece.create = function (dp, code) {\r\n        switch (dp.charAt(1)) {\r\n            case \"R\":\r\n                return new Rook(dp, code);\r\n            case \"P\":\r\n                return new Pawn(dp, code);\r\n            case \"K\":\r\n                return new King(dp, code);\r\n            case \"Q\":\r\n                return new Queen(dp, code);\r\n            case \"B\":\r\n                return new Bishop(dp, code);\r\n            case \"N\":\r\n                return new Knight(dp, code);\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n    return Piece;\r\n}());\r\nvar Rook = /** @class */ (function (_super) {\r\n    __extends(Rook, _super);\r\n    function Rook() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Rook\";\r\n        _this.radius = new Radius();\r\n        _this.home = [[0, 3], [0, 10]];\r\n        return _this;\r\n    }\r\n    Rook.prototype.moves = function () {\r\n        return [];\r\n    };\r\n    Rook.prototype.attacks = function () {\r\n        return [[new Vector(function (r) { return r; }, function (_) { return 0; }), true],\r\n            [new Vector(function (r) { return -r; }, function (_) { return 0; }), true],\r\n            [new Vector(function (_) { return 0; }, function (r) { return r; }), true],\r\n            [new Vector(function (_) { return 0; }, function (r) { return -r; }), true]];\r\n    };\r\n    return Rook;\r\n}(Piece));\r\nvar Pawn = /** @class */ (function (_super) {\r\n    __extends(Pawn, _super);\r\n    function Pawn() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Pawn\";\r\n        _this.radius = new Radius(1);\r\n        _this.home = [[1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]];\r\n        return _this;\r\n    }\r\n    Pawn.prototype.moves = function () {\r\n        return this.moved()\r\n            ? [[new Vector(function (_) { return 0; }, function (_) { return 1; }), true]]\r\n            : [[new Vector(function (_) { return 0; }, function (_) { return 1; }), true],\r\n                [new Vector(function (_) { return 0; }, function (_) { return 2; }), true]];\r\n    };\r\n    Pawn.prototype.attacks = function () {\r\n        return [[new Vector(function (r) { return r; }, function (r) { return r; }), true],\r\n            [new Vector(function (r) { return -r; }, function (r) { return r; }), true]];\r\n    };\r\n    return Pawn;\r\n}(Piece));\r\nvar King = /** @class */ (function (_super) {\r\n    __extends(King, _super);\r\n    function King() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"King\";\r\n        _this.radius = new Radius(1);\r\n        _this.home = _this.player instanceof Red ||\r\n            _this.player instanceof Yellow\r\n            ? [[0, 7]]\r\n            : [[0, 6]];\r\n        return _this;\r\n    }\r\n    King.prototype.moves = function () {\r\n        return [];\r\n    };\r\n    King.prototype.attacks = function () {\r\n        return [[new Vector(function (_) { return 1; }, function (_) { return 0; }), true],\r\n            [new Vector(function (_) { return -1; }, function (_) { return 0; }), true],\r\n            [new Vector(function (_) { return 0; }, function (_) { return 1; }), true],\r\n            [new Vector(function (_) { return 0; }, function (_) { return -1; }), true],\r\n            [new Vector(function (_) { return 1; }, function (_) { return 1; }), true],\r\n            [new Vector(function (_) { return 1; }, function (_) { return -1; }), true],\r\n            [new Vector(function (_) { return -1; }, function (_) { return 1; }), true],\r\n            [new Vector(function (_) { return -1; }, function (_) { return -1; }), true]];\r\n    };\r\n    return King;\r\n}(Piece));\r\nvar Queen = /** @class */ (function (_super) {\r\n    __extends(Queen, _super);\r\n    function Queen() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Queen\";\r\n        _this.radius = new Radius();\r\n        _this.home = _this.player instanceof Red ||\r\n            _this.player instanceof Yellow\r\n            ? [[0, 6]]\r\n            : [[0, 7]];\r\n        return _this;\r\n    }\r\n    Queen.prototype.moves = function () {\r\n        return [];\r\n    };\r\n    Queen.prototype.attacks = function () {\r\n        return [[new Vector(function (r) { return r; }, function (_) { return 0; }), true],\r\n            [new Vector(function (r) { return -r; }, function (_) { return 0; }), true],\r\n            [new Vector(function (_) { return 0; }, function (r) { return r; }), true],\r\n            [new Vector(function (_) { return 0; }, function (r) { return -r; }), true],\r\n            [new Vector(function (r) { return r; }, function (r) { return r; }), true],\r\n            [new Vector(function (r) { return r; }, function (r) { return -r; }), true],\r\n            [new Vector(function (r) { return -r; }, function (r) { return r; }), true],\r\n            [new Vector(function (r) { return -r; }, function (r) { return -r; }), true]];\r\n    };\r\n    return Queen;\r\n}(Piece));\r\nvar Bishop = /** @class */ (function (_super) {\r\n    __extends(Bishop, _super);\r\n    function Bishop() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Bishop\";\r\n        _this.radius = new Radius();\r\n        _this.home = [[0, 5], [0, 8]];\r\n        return _this;\r\n    }\r\n    Bishop.prototype.moves = function () {\r\n        return [];\r\n    };\r\n    Bishop.prototype.attacks = function () {\r\n        return [[new Vector(function (r) { return r; }, function (r) { return r; }), true],\r\n            [new Vector(function (r) { return r; }, function (r) { return -r; }), true],\r\n            [new Vector(function (r) { return -r; }, function (r) { return r; }), true],\r\n            [new Vector(function (r) { return -r; }, function (r) { return -r; }), true]];\r\n    };\r\n    return Bishop;\r\n}(Piece));\r\nvar Knight = /** @class */ (function (_super) {\r\n    __extends(Knight, _super);\r\n    function Knight() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"Knight\";\r\n        _this.radius = new Radius(1);\r\n        _this.home = [[0, 4], [0, 9]];\r\n        return _this;\r\n    }\r\n    Knight.prototype.moves = function () {\r\n        return [];\r\n    };\r\n    Knight.prototype.attacks = function () {\r\n        return [[new Vector(function (_) { return 2; }, function (_) { return 1; }), true],\r\n            [new Vector(function (_) { return 2; }, function (_) { return -1; }), true],\r\n            [new Vector(function (_) { return -2; }, function (_) { return 1; }), true],\r\n            [new Vector(function (_) { return -2; }, function (_) { return -1; }), true],\r\n            [new Vector(function (_) { return 1; }, function (_) { return 2; }), true],\r\n            [new Vector(function (_) { return 1; }, function (_) { return -2; }), true],\r\n            [new Vector(function (_) { return -1; }, function (_) { return 2; }), true],\r\n            [new Vector(function (_) { return -1; }, function (_) { return -2; }), true]];\r\n    };\r\n    return Knight;\r\n}(Piece));\r\nvar Square = /** @class */ (function () {\r\n    function Square(m, n) {\r\n        this.m = m;\r\n        this.n = n;\r\n        return this;\r\n    }\r\n    Square.prototype.char = function (n) {\r\n        return String.fromCharCode(n + 97);\r\n    };\r\n    Square.prototype.code = function () {\r\n        return \"\" + this.char(this.n) + (this.m + 1);\r\n    };\r\n    Square.prototype.accessible = function () {\r\n        return (this.m >= 3 && this.m <= 10 && this.n >= 0 && this.n <= 2) ||\r\n            (this.m >= 0 && this.m <= 13 && this.n >= 3 && this.n <= 10) ||\r\n            (this.m >= 3 && this.m <= 10 && this.n >= 11 && this.n <= 13);\r\n    };\r\n    Square.coords = function (code) {\r\n        var m = parseInt(code.slice(1)) - 1;\r\n        var n = code.charCodeAt(0) - 97;\r\n        return [m, n];\r\n    };\r\n    return Square;\r\n}());\r\nvar Board = /** @class */ (function () {\r\n    function Board() {\r\n        this.squares = [];\r\n        for (var m = 0; m < 14; m++) {\r\n            this.squares[m] = [];\r\n            for (var n = 0; n < 14; n++) {\r\n                this.squares[m][n] = new Square(m, n);\r\n            }\r\n        }\r\n    }\r\n    Board.prototype.square = function (code) {\r\n        var c = Square.coords(code);\r\n        return this.squares[c[0]][c[1]];\r\n    };\r\n    Board.prototype.valid = function (x, y) {\r\n        return (x >= 0 && x <= 13 && y >= 0 && y <= 13);\r\n    };\r\n    return Board;\r\n}());\r\nvar CountdownHelper = /** @class */ (function () {\r\n    function CountdownHelper() {\r\n        this.counter = 60;\r\n        this.enabled = false;\r\n        this.utterances = [60];\r\n    }\r\n    CountdownHelper.prototype.username = function () {\r\n        return document.getElementById(\"four-player-username\").innerText;\r\n    };\r\n    CountdownHelper.prototype.avatar = function (nodes) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            var node = nodes[i];\r\n            if (node instanceof HTMLElement &&\r\n                node.classList.contains(\"player-avatar\")) {\r\n                return node;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    CountdownHelper.prototype.current = function (mr) {\r\n        return parseFloat(mr.oldValue.trim().split(\":\")[1]);\r\n    };\r\n    CountdownHelper.prototype.reset = function (mr) {\r\n        if (mr.type === \"childList\" &&\r\n            mr.target instanceof HTMLDivElement &&\r\n            mr.target.classList.length === 0 &&\r\n            mr.addedNodes.length === 1) {\r\n            var modal = mr.addedNodes[0];\r\n            if (modal instanceof HTMLElement &&\r\n                modal.classList.contains(\"modal-container\")) {\r\n                var go = modal.querySelector(\".game-over-container\");\r\n                if (go) {\r\n                    this.utterances = [60];\r\n                    this.counter = 60;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    CountdownHelper.prototype.words = function () {\r\n        return this.counter <= 5\r\n            ? this.counter.toString()\r\n            : this.counter + \" seconds left\";\r\n    };\r\n    CountdownHelper.prototype.utterance = function () {\r\n        return this.rate(new SpeechSynthesisUtterance(this.words()));\r\n    };\r\n    CountdownHelper.prototype.rate = function (utterance) {\r\n        utterance.rate = 1.8;\r\n        return utterance;\r\n    };\r\n    CountdownHelper.prototype.utter = function (mr) {\r\n        if (this.enabled) {\r\n            if (mr.type === \"characterData\") {\r\n                var timer = mr.target.parentNode.parentNode;\r\n                if (timer) {\r\n                    if (timer instanceof HTMLElement &&\r\n                        timer.classList.contains(\"player-clock-timer\")) {\r\n                        var avatar = this.avatar(timer.children);\r\n                        if (avatar) {\r\n                            if (avatar instanceof HTMLAnchorElement) {\r\n                                if (avatar.pathname === \"/member/\" + this.username()) {\r\n                                    var c = this.current(mr);\r\n                                    if (this.counter - c > 0 &&\r\n                                        this.counter - c <= 1) {\r\n                                        this.counter = c;\r\n                                    }\r\n                                    if (((this.counter <= 5 &&\r\n                                        this.counter % 1 === 0) ||\r\n                                        (this.counter > 5 &&\r\n                                            this.counter % 5 === 0)) &&\r\n                                        this.counter !== this.utterances[0]) {\r\n                                        window.speechSynthesis.speak(this.utterance());\r\n                                        this.utterances.unshift(this.counter);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return CountdownHelper;\r\n}());\r\nvar AnalysisHelper = /** @class */ (function () {\r\n    function AnalysisHelper() {\r\n        this.colours = [\"red\", \"blue\", \"yellow\", \"green\"];\r\n        this.board = new Board();\r\n        var username = this.getUsername();\r\n        if (username) {\r\n            this.username = username;\r\n        }\r\n        else {\r\n            this.username = \"red\";\r\n        }\r\n    }\r\n    AnalysisHelper.prototype.setOriginSquare = function (target) {\r\n        var originSquareElement = this.getThisSquareElement(event.target);\r\n        var ds = originSquareElement.attributes[\"data-square\"];\r\n        if (!ds) {\r\n            return;\r\n        }\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var origin = element.attributes[\"origin\"];\r\n        if (origin) {\r\n            origin.value = ds.value;\r\n        }\r\n        else {\r\n            element.setAttribute(\"origin\", ds.value);\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.getOriginSquareElement = function (boardElement) {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var origin = element.attributes[\"origin\"];\r\n        if (origin) {\r\n            return this.getSquareElement(boardElement, origin.value);\r\n        }\r\n        return undefined;\r\n    };\r\n    AnalysisHelper.prototype.resetOriginSquareAndCleanSquares = function () {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        if (element.attributes[\"origin\"]) {\r\n            element.removeAttribute(\"origin\");\r\n        }\r\n        var boardElement = this.getBoardElement();\r\n        this.clearCandidatesFromSquares(boardElement);\r\n        this.cleanColouredSquares(boardElement);\r\n    };\r\n    AnalysisHelper.prototype.showMovesAndEnemies = function (target) {\r\n        if (!this.username) {\r\n            return;\r\n        }\r\n        var boardElement = this.getBoardElement();\r\n        if (!boardElement) {\r\n            return;\r\n        }\r\n        var originSquareElement = this.getOriginSquareElement(boardElement);\r\n        if (!originSquareElement) {\r\n            return;\r\n        }\r\n        var targetSquareElement = this.getThisSquareElement(target);\r\n        if (!targetSquareElement) {\r\n            return;\r\n        }\r\n        this.clearCandidatesFromSquares(boardElement);\r\n        this.cleanColouredSquares(boardElement);\r\n        this.createBoard(boardElement);\r\n        var ds = originSquareElement.attributes[\"data-square\"];\r\n        if (!ds) {\r\n            return;\r\n        }\r\n        var originSquare = this.board.square(ds.value);\r\n        if (!originSquare.piece) {\r\n            return;\r\n        }\r\n        if (originSquare.piece.player.name.toLowerCase() !== this.username) {\r\n            return;\r\n        }\r\n        this.analyseSquares(boardElement);\r\n        this.colouriseSquares(boardElement, originSquareElement, targetSquareElement);\r\n    };\r\n    AnalysisHelper.prototype.getThisSquareElement = function (target) {\r\n        var squareElement;\r\n        if (target instanceof HTMLElement) {\r\n            if (target.className.indexOf(\"piece-\") !== -1) {\r\n                squareElement = target.parentElement;\r\n            }\r\n            if (!squareElement) {\r\n                squareElement = target;\r\n            }\r\n            if (squareElement.className.indexOf(\"square-\") !== -1) {\r\n                return squareElement;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    AnalysisHelper.prototype.getBoardElement = function () {\r\n        var boardElement;\r\n        var elements = document.body.getElementsByTagName(\"div\");\r\n        for (var i = 0; i < elements.length; i++) {\r\n            if (elements[i].className.indexOf(\"board-\") === 0) {\r\n                var element = elements[i];\r\n                if (element instanceof HTMLElement) {\r\n                    boardElement = element;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return boardElement;\r\n    };\r\n    AnalysisHelper.prototype.cleanColouredSquares = function (boardElement) {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var mods = element.attributes[\"modifications\"];\r\n        if (!mods) {\r\n            return;\r\n        }\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        var codes = mods.value.split(\",\");\r\n        for (var i = 0; i < codes.length; i++) {\r\n            searchLoop: for (var m = 0; m < 14; m++) {\r\n                for (var n = 0; n < 14; n++) {\r\n                    var element_1 = row[m].children[n];\r\n                    var ds = element_1.attributes[\"data-square\"];\r\n                    if (!ds || !(element_1 instanceof HTMLElement)) {\r\n                        continue;\r\n                    }\r\n                    if (ds.value !== codes[i]) {\r\n                        continue;\r\n                    }\r\n                    element_1.style.backgroundColor = null;\r\n                    break searchLoop;\r\n                }\r\n            }\r\n        }\r\n        element.removeAttribute(\"modifications\");\r\n    };\r\n    AnalysisHelper.prototype.clearCandidatesFromSquares = function (boardElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (element.attributes[\"attacks\"]) {\r\n                    element.removeAttribute(\"attacks\");\r\n                }\r\n                if (element.attributes[\"moves\"]) {\r\n                    element.removeAttribute(\"moves\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.createBoard = function (boardElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (!(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                var ds = element.attributes[\"data-square\"];\r\n                if (!ds) {\r\n                    continue;\r\n                }\r\n                var square = this.board.square(ds.value);\r\n                var child = this.getPieceElement(element.children);\r\n                if (!child) {\r\n                    continue;\r\n                }\r\n                var dp = child.attributes[\"data-piece\"];\r\n                if (!dp) {\r\n                    continue;\r\n                }\r\n                square.piece = Piece.create(dp.value, ds.value);\r\n            }\r\n        }\r\n    };\r\n    // go to every square on the board and if there is\r\n    // a piece on it, find out all the possible squares\r\n    // it can occupy and add the piece as a candidate\r\n    // (friend or enemy) to the current player\r\n    AnalysisHelper.prototype.analyseSquares = function (boardElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (!(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                var ds = element.attributes[\"data-square\"];\r\n                if (!ds) {\r\n                    continue;\r\n                }\r\n                var square = this.board.square(ds.value);\r\n                if (!square.accessible()) {\r\n                    continue;\r\n                }\r\n                var piece = square.piece;\r\n                if (!piece) {\r\n                    continue;\r\n                }\r\n                if (piece.player instanceof Dead) {\r\n                    continue;\r\n                }\r\n                this.checkRadius(boardElement, square);\r\n            }\r\n        }\r\n    };\r\n    // check all the squares the piece can occupy for a\r\n    // given radius from the piece's current location\r\n    // pieceSquare: the square that the piece whose \r\n    // radius we are checking is currently located\r\n    AnalysisHelper.prototype.checkRadius = function (boardElement, pieceSquare) {\r\n        this.checkAttackRadius(boardElement, pieceSquare);\r\n        this.checkMoveRadius(boardElement, pieceSquare);\r\n    };\r\n    AnalysisHelper.prototype.checkAttackRadius = function (boardElement, pieceSquare) {\r\n        var piece = pieceSquare.piece;\r\n        var vectors = piece.attacks();\r\n        for (;;) {\r\n            var radius = piece.radius.next();\r\n            var remaining = this.remaining(vectors);\r\n            if (radius.done || radius.value > 14 || remaining === 0) {\r\n                piece.radius.reset();\r\n                break;\r\n            }\r\n            for (var j = 0; j < vectors.length; j++) {\r\n                this.checkAttackVector(boardElement, pieceSquare, vectors[j], radius.value);\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.checkMoveRadius = function (boardElement, pieceSquare) {\r\n        var piece = pieceSquare.piece;\r\n        var vectors = piece.moves();\r\n        for (;;) {\r\n            var radius = piece.radius.next();\r\n            var remaining = this.remaining(vectors);\r\n            if (radius.done || radius.value > 14 || remaining === 0) {\r\n                piece.radius.reset();\r\n                break;\r\n            }\r\n            for (var j = 0; j < vectors.length; j++) {\r\n                this.checkMoveVector(boardElement, pieceSquare, vectors[j], radius.value);\r\n            }\r\n        }\r\n    };\r\n    // get the square for the given radius relating the\r\n    // vector representing the piece's direction of travel\r\n    // and rotate it depending on the piece's player\r\n    AnalysisHelper.prototype.checkAttackVector = function (boardElement, pieceSquare, vector, radius) {\r\n        if (vector[1]) {\r\n            var x1 = vector[0].x1(radius);\r\n            var y1 = vector[0].y1(radius);\r\n            var _a = pieceSquare.piece.player.rotate(pieceSquare.n, pieceSquare.m, x1, y1), x2 = _a[0], y2 = _a[1];\r\n            if (!this.board.valid(x2, y2)) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            var targetSquare = this.board.squares[y2][x2];\r\n            if (!targetSquare.accessible()) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            this.setAttackCandidate(boardElement, pieceSquare, targetSquare);\r\n            if (targetSquare.piece) {\r\n                vector[1] = false;\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.checkMoveVector = function (boardElement, pieceSquare, vector, radius) {\r\n        if (vector[1]) {\r\n            var x1 = vector[0].x1(radius);\r\n            var y1 = vector[0].y1(radius);\r\n            var _a = pieceSquare.piece.player.rotate(pieceSquare.n, pieceSquare.m, x1, y1), x2 = _a[0], y2 = _a[1];\r\n            if (!this.board.valid(x2, y2)) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            var targetSquare = this.board.squares[y2][x2];\r\n            if (!targetSquare.accessible()) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            if (!targetSquare.piece) {\r\n                this.setMoveCandidate(boardElement, pieceSquare, targetSquare);\r\n            }\r\n            else {\r\n                vector[1] = false;\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.setAttackCandidate = function (boardElement, pieceSquare, targetSquare) {\r\n        var element = this.getSquareElement(boardElement, targetSquare.code());\r\n        if (!element) {\r\n            return;\r\n        }\r\n        var attacks = element.attributes[\"attacks\"];\r\n        if (attacks) {\r\n            attacks.value = attacks.value + \",\" + pieceSquare.code();\r\n        }\r\n        else {\r\n            element.setAttribute(\"attacks\", pieceSquare.code());\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.setMoveCandidate = function (boardElement, pieceSquare, targetSquare) {\r\n        var element = this.getSquareElement(boardElement, targetSquare.code());\r\n        if (!element) {\r\n            return;\r\n        }\r\n        var moves = element.attributes[\"moves\"];\r\n        if (moves) {\r\n            moves.value = moves.value + \",\" + pieceSquare.code();\r\n        }\r\n        else {\r\n            element.setAttribute(\"moves\", pieceSquare.code());\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.getSquareElement = function (boardElement, code) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return undefined;\r\n        }\r\n        var squareElement;\r\n        rowLoop: for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (!(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                if (!element.classList.contains(\"square-\" + code)) {\r\n                    continue;\r\n                }\r\n                squareElement = element;\r\n                break rowLoop;\r\n            }\r\n        }\r\n        return squareElement;\r\n    };\r\n    AnalysisHelper.prototype.isTargetSquareValid = function (boardElement, originSquareElement, targetSquareElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return false;\r\n        }\r\n        var ds = originSquareElement.attributes[\"data-square\"];\r\n        if (!ds) {\r\n            return false;\r\n        }\r\n        var originSquare = this.board.square(ds.value);\r\n        var piece = originSquare.piece;\r\n        if (!piece) {\r\n            return false;\r\n        }\r\n        var codes;\r\n        if (piece.moves().length > 0) {\r\n            var moves = targetSquareElement.attributes[\"moves\"];\r\n            if (!moves) {\r\n                return false;\r\n            }\r\n            codes = moves.value.split(\",\");\r\n        }\r\n        else {\r\n            var attacks = targetSquareElement.attributes[\"attacks\"];\r\n            if (!attacks) {\r\n                return false;\r\n            }\r\n            codes = attacks.value.split(\",\");\r\n        }\r\n        if (codes.length === 0) {\r\n            return false;\r\n        }\r\n        if (codes.indexOf(ds.value) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    AnalysisHelper.prototype.colouriseSquares = function (boardElement, originSquareElement, targetSquareElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        this.colouriseMovementSquares(row, boardElement, originSquareElement);\r\n        if (!this.isTargetSquareValid(boardElement, originSquareElement, targetSquareElement)) {\r\n            return;\r\n        }\r\n        this.colouriseEnemySquares(row, targetSquareElement);\r\n    };\r\n    AnalysisHelper.prototype.colouriseMovementSquares = function (row, boardElement, originSquareElement) {\r\n        var dso = originSquareElement.attributes[\"data-square\"];\r\n        if (!dso) {\r\n            return;\r\n        }\r\n        var originSquare = this.board.square(dso.value);\r\n        var piece = originSquare.piece;\r\n        if (!piece) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                var ds = element.attributes[\"data-square\"];\r\n                if (!ds || !(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                var square = this.board.square(ds.value);\r\n                if (square.piece) {\r\n                    if (square.piece.player.name.toLowerCase() === this.username) {\r\n                        continue;\r\n                    }\r\n                }\r\n                var moveCodes = void 0;\r\n                if (piece.moves().length !== 0) {\r\n                    var moves = element.attributes[\"moves\"];\r\n                    if (!moves) {\r\n                        continue;\r\n                    }\r\n                    moveCodes = moves.value.split(\",\");\r\n                }\r\n                else {\r\n                    var attacks_1 = element.attributes[\"attacks\"];\r\n                    if (!attacks_1) {\r\n                        continue;\r\n                    }\r\n                    moveCodes = attacks_1.value.split(\",\");\r\n                }\r\n                if (moveCodes.length === 0) {\r\n                    continue;\r\n                }\r\n                if (moveCodes.indexOf(dso.value) === -1) {\r\n                    continue;\r\n                }\r\n                var attackCodes = [];\r\n                var attacks = element.attributes[\"attacks\"];\r\n                if (attacks) {\r\n                    attackCodes = attacks.value.split(\",\");\r\n                }\r\n                var index = attackCodes.indexOf(dso.value);\r\n                if (index !== -1) {\r\n                    attackCodes.splice(index, 1);\r\n                }\r\n                var friendly = this.isFriendlySquare(boardElement, piece, attackCodes);\r\n                var colour = this.getColour(element, friendly);\r\n                element.style.backgroundColor = colour;\r\n                this.addCodeToModifiedSquares(ds.value);\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.colouriseEnemySquares = function (row, targetSquareElement) {\r\n        var attacks = targetSquareElement.attributes[\"attacks\"];\r\n        if (!attacks) {\r\n            return;\r\n        }\r\n        var codes = attacks.value.split(\",\");\r\n        if (codes.length == 0) {\r\n            return;\r\n        }\r\n        var dst = targetSquareElement.attributes[\"data-square\"];\r\n        if (!dst) {\r\n            return;\r\n        }\r\n        var index = codes.indexOf(dst.value);\r\n        if (index !== -1) {\r\n            codes.splice(index, 1);\r\n        }\r\n        for (var i = 0; i < codes.length; i++) {\r\n            searchLoop: for (var m = 0; m < 14; m++) {\r\n                for (var n = 0; n < 14; n++) {\r\n                    var element = row[m].children[n];\r\n                    var ds = element.attributes[\"data-square\"];\r\n                    if (!ds || !(element instanceof HTMLElement)) {\r\n                        continue;\r\n                    }\r\n                    if (ds.value !== codes[i]) {\r\n                        continue;\r\n                    }\r\n                    var square = this.board.square(ds.value);\r\n                    var piece = square.piece;\r\n                    if (!piece) {\r\n                        continue;\r\n                    }\r\n                    if (piece.player.name.toLowerCase() === this.username) {\r\n                        continue;\r\n                    }\r\n                    var colour = this.getColour(element, false);\r\n                    element.style.backgroundColor = colour;\r\n                    this.addCodeToModifiedSquares(ds.value);\r\n                    break searchLoop;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.isFriendlySquare = function (boardElement, piece, codes) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return false;\r\n        }\r\n        var friends = 0;\r\n        var enemies = 0;\r\n        for (var i = 0; i < codes.length; i++) {\r\n            for (var m = 0; m < 14; m++) {\r\n                for (var n = 0; n < 14; n++) {\r\n                    var element = row[m].children[n];\r\n                    var ds = element.attributes[\"data-square\"];\r\n                    if (!ds || !(element instanceof HTMLElement)) {\r\n                        continue;\r\n                    }\r\n                    if (ds.value !== codes[i]) {\r\n                        continue;\r\n                    }\r\n                    var square = this.board.square(ds.value);\r\n                    var piece_1 = square.piece;\r\n                    if (!piece_1) {\r\n                        continue;\r\n                    }\r\n                    if (piece_1.player.name.toLowerCase() === this.username) {\r\n                        friends++;\r\n                    }\r\n                    else {\r\n                        enemies++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (friends === 0 && enemies === 0) {\r\n            return true;\r\n        }\r\n        return friends > enemies;\r\n    };\r\n    AnalysisHelper.prototype.getColour = function (element, friendly) {\r\n        var rgb;\r\n        var bgc = window\r\n            .getComputedStyle(element, null)\r\n            .getPropertyValue(\"background-color\");\r\n        if (bgc.indexOf(\"#\") === 0) {\r\n            rgb = this.hexToRgb(bgc);\r\n        }\r\n        if (bgc.indexOf(\"rgb\") === 0) {\r\n            var vals = bgc\r\n                .substring(4, bgc.length - 1)\r\n                .split(\", \");\r\n            rgb = {\r\n                r: parseInt(vals[0]),\r\n                g: parseInt(vals[1]),\r\n                b: parseInt(vals[2])\r\n            };\r\n        }\r\n        ;\r\n        if (friendly) {\r\n            return \"rgb(\" + rgb.r + \", 255, \" + rgb.b + \")\";\r\n        }\r\n        else {\r\n            return \"rgb(255, \" + rgb.g + \", \" + rgb.b + \")\";\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.addCodeToModifiedSquares = function (code) {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var mods = element.attributes[\"modifications\"];\r\n        if (mods) {\r\n            mods.value = mods.value + \",\" + code;\r\n        }\r\n        else {\r\n            element.setAttribute(\"modifications\", code);\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.show = function () {\r\n        for (var m = 0; m < 14; m++) {\r\n            var row = [\"|\"];\r\n            for (var n = 0; n < 14; n++) {\r\n                var square = this.board.squares[m][n];\r\n                if (square.accessible()) {\r\n                    row.push(square.piece ? square.piece.dp : \"[]\");\r\n                }\r\n                else {\r\n                    row.push(\"  \");\r\n                }\r\n            }\r\n            row.push(\"|\");\r\n            var s = this.board.squares;\r\n            console.log(row.join(\" \") +\r\n                \"%O %O %O %O %O %O %O %O %O %O %O %O %O %O |\", s[m][0], s[m][1], s[m][2], s[m][3], s[m][4], s[m][5], s[m][6], s[m][7], s[m][8], s[m][9], s[m][10], s[m][11], s[m][12], s[m][13]);\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.getUsername = function () {\r\n        var username = document.getElementById(\"four-player-username\").innerText;\r\n        var elements = document.body.getElementsByClassName(\"player-avatar\");\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            if (!(element instanceof HTMLAnchorElement)) {\r\n                continue;\r\n            }\r\n            if (element.href.indexOf(username) === -1) {\r\n                continue;\r\n            }\r\n            var parent_1 = element.parentElement;\r\n            for (var j = 0; j < parent_1.classList.length; j++) {\r\n                for (var k = 0; k < this.colours.length; k++) {\r\n                    if (this.colours[k] !== parent_1.classList[j]) {\r\n                        continue;\r\n                    }\r\n                    return this.colours[k];\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    AnalysisHelper.prototype.hexToRgb = function (hex) {\r\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n            return r + r + g + g + b + b;\r\n        });\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    };\r\n    AnalysisHelper.prototype.remaining = function (moves) {\r\n        var remaining = 0;\r\n        for (var i = 0; i < moves.length; i++) {\r\n            if (moves[i][1]) {\r\n                remaining++;\r\n            }\r\n        }\r\n        return remaining;\r\n    };\r\n    AnalysisHelper.prototype.getPieceElement = function (elements) {\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            if (element instanceof HTMLElement &&\r\n                element.className.indexOf(\"piece-\") === 0) {\r\n                return element;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return AnalysisHelper;\r\n}());\r\nvar DomWatcher = /** @class */ (function () {\r\n    function DomWatcher() {\r\n        this.countdown = new CountdownHelper();\r\n        this.init = {\r\n            characterDataOldValue: true,\r\n            attributeOldValue: true,\r\n            characterData: true,\r\n            attributes: true,\r\n            childList: true,\r\n            subtree: true\r\n        };\r\n        this.createDocumentBodyObserverSubscription();\r\n        this.observer.observe(document.body, this.init);\r\n    }\r\n    DomWatcher.prototype.createDocumentBodyObserverSubscription = function () {\r\n        var _this = this;\r\n        this.observer = new MutationObserver(function (mrs) {\r\n            mrs.forEach(function (mr) {\r\n                _this.countdown.reset(mr);\r\n                _this.countdown.utter(mr);\r\n            });\r\n        });\r\n    };\r\n    return DomWatcher;\r\n}());\r\nvar DomModifier = /** @class */ (function () {\r\n    function DomModifier() {\r\n        document.body.addEventListener(\"mouseover\", this.over);\r\n        document.body.addEventListener(\"mousedown\", this.down);\r\n        document.body.addEventListener(\"mouseup\", this.up);\r\n        window.addEventListener(\"keydown\", function (e) {\r\n            if (!e.repeat &&\r\n                e.key === \"q\" || e.key === \"Q\") {\r\n                console.log(\"q key pressed\");\r\n                // show hanging pieces and their attackers\r\n                // add hidden field to dom with affected elements\r\n            }\r\n        });\r\n        window.addEventListener(\"keyup\", function (e) {\r\n            if (e.key === \"q\" || e.key === \"Q\") {\r\n                console.log(\"q key released\");\r\n                // clear effects on elements for hanging pieces\r\n                // remove hidden field from dom\r\n            }\r\n        });\r\n        this.domWatcher = new DomWatcher();\r\n        this.rightAlignStartButton();\r\n        this.addStartAiButton();\r\n    }\r\n    DomModifier.prototype.addStartAiButton = function () {\r\n        var _this = this;\r\n        var btnNewGame = document.getElementsByClassName(\"btns-container\")[0];\r\n        if (btnNewGame instanceof HTMLElement) {\r\n            btnNewGame.style.cssFloat = \"right\";\r\n            var btnOn_1 = btnNewGame.cloneNode(true);\r\n            if (btnOn_1 instanceof HTMLElement) {\r\n                btnOn_1.style.cssFloat = \"left\";\r\n                btnOn_1.style.marginRight = \"12px\";\r\n                var anchorOn = btnOn_1.firstChild;\r\n                if (anchorOn.nodeName === \"A\") {\r\n                    if (anchorOn instanceof HTMLElement) {\r\n                        anchorOn.innerText = \"Start AI\";\r\n                        anchorOn.classList.remove(\"new-game-btn\");\r\n                    }\r\n                }\r\n                var btnOff_1 = btnOn_1.cloneNode(true);\r\n                if (btnOff_1 instanceof HTMLElement) {\r\n                    btnOff_1.style.display = \"none\";\r\n                    var anchorOff = btnOff_1.firstChild;\r\n                    if (anchorOff.nodeName === \"A\") {\r\n                        if (anchorOff instanceof HTMLElement) {\r\n                            anchorOff.innerText = \"Stop AI\";\r\n                            anchorOff.style.color = \"#b4b4b3\";\r\n                            anchorOff.style.borderBottom = \"#272422\";\r\n                            anchorOff.style.backgroundColor = \"#272422\";\r\n                            anchorOff.addEventListener(\"click\", function () {\r\n                                _this.domWatcher.countdown.enabled = false;\r\n                                btnOff_1.style.display = \"none\";\r\n                                btnOn_1.style.display = \"block\";\r\n                            });\r\n                        }\r\n                    }\r\n                    anchorOn.addEventListener(\"click\", function () {\r\n                        _this.domWatcher.countdown.enabled = true;\r\n                        btnOff_1.style.display = \"block\";\r\n                        btnOn_1.style.display = \"none\";\r\n                    });\r\n                }\r\n                btnNewGame.parentNode.appendChild(btnOn_1);\r\n                btnNewGame.parentNode.appendChild(btnOff_1);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    DomModifier.prototype.rightAlignStartButton = function () {\r\n        var head = document.getElementsByTagName(\"head\")[0];\r\n        if (head instanceof HTMLElement) {\r\n            var text = document.createTextNode(\".btns-container { float: right; }\");\r\n            var style = document.createElement(\"style\");\r\n            if (style instanceof HTMLElement) {\r\n                style.type = \"text/css\";\r\n                style.appendChild(text);\r\n            }\r\n            head.appendChild(style);\r\n        }\r\n        return this;\r\n    };\r\n    DomModifier.prototype.over = function (event) {\r\n        new AnalysisHelper().showMovesAndEnemies(event.target);\r\n    };\r\n    DomModifier.prototype.down = function (event) {\r\n        var helper = new AnalysisHelper();\r\n        helper.setOriginSquare(event.target);\r\n        helper.showMovesAndEnemies(event.target);\r\n    };\r\n    DomModifier.prototype.up = function (event) {\r\n        new AnalysisHelper().resetOriginSquareAndCleanSquares();\r\n    };\r\n    return DomModifier;\r\n}());\r\nvar modifier = new DomModifier();\r\n","map":{"mappings":""}}
