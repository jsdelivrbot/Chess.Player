{"code":"import { Dead } from \"../player/dead\";\r\nimport { Board } from \"../board\";\r\nimport { Piece } from \"../piece\";\r\nvar AnalysisHelper = /** @class */ (function () {\r\n    function AnalysisHelper() {\r\n        this.colours = [\"red\", \"blue\", \"yellow\", \"green\"];\r\n        this.board = new Board();\r\n        var username = this.getUsername();\r\n        if (username) {\r\n            this.username = username;\r\n        }\r\n        else {\r\n            this.username = \"red\";\r\n        }\r\n    }\r\n    AnalysisHelper.prototype.setOriginSquare = function (target) {\r\n        var originSquareElement = this.getThisSquareElement(event.target);\r\n        var ds = originSquareElement.attributes[\"data-square\"];\r\n        if (!ds) {\r\n            return;\r\n        }\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var origin = element.attributes[\"origin\"];\r\n        if (origin) {\r\n            origin.value = ds.value;\r\n        }\r\n        else {\r\n            element.setAttribute(\"origin\", ds.value);\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.getOriginSquareElement = function (boardElement) {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var origin = element.attributes[\"origin\"];\r\n        if (origin) {\r\n            return this.getSquareElement(boardElement, origin.value);\r\n        }\r\n        return undefined;\r\n    };\r\n    AnalysisHelper.prototype.resetOriginSquareAndCleanSquares = function () {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        if (element.attributes[\"origin\"]) {\r\n            element.removeAttribute(\"origin\");\r\n        }\r\n        var boardElement = this.getBoardElement();\r\n        this.clearCandidatesFromSquares(boardElement);\r\n        this.cleanColouredSquares(boardElement);\r\n    };\r\n    AnalysisHelper.prototype.showMovesAndEnemies = function (target) {\r\n        if (!this.username) {\r\n            return;\r\n        }\r\n        var boardElement = this.getBoardElement();\r\n        if (!boardElement) {\r\n            return;\r\n        }\r\n        var originSquareElement = this.getOriginSquareElement(boardElement);\r\n        if (!originSquareElement) {\r\n            return;\r\n        }\r\n        var targetSquareElement = this.getThisSquareElement(target);\r\n        if (!targetSquareElement) {\r\n            return;\r\n        }\r\n        this.clearCandidatesFromSquares(boardElement);\r\n        this.cleanColouredSquares(boardElement);\r\n        this.createBoard(boardElement);\r\n        var ds = originSquareElement.attributes[\"data-square\"];\r\n        if (!ds) {\r\n            return;\r\n        }\r\n        var originSquare = this.board.square(ds.value);\r\n        if (!originSquare.piece) {\r\n            return;\r\n        }\r\n        if (originSquare.piece.player.name.toLowerCase() !== this.username) {\r\n            return;\r\n        }\r\n        this.analyseSquares(boardElement);\r\n        this.colouriseSquares(boardElement, originSquareElement, targetSquareElement);\r\n    };\r\n    AnalysisHelper.prototype.getThisSquareElement = function (target) {\r\n        var squareElement;\r\n        if (target instanceof HTMLElement) {\r\n            if (target.className.indexOf(\"piece-\") !== -1) {\r\n                squareElement = target.parentElement;\r\n            }\r\n            if (!squareElement) {\r\n                squareElement = target;\r\n            }\r\n            if (squareElement.className.indexOf(\"square-\") !== -1) {\r\n                return squareElement;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    AnalysisHelper.prototype.getBoardElement = function () {\r\n        var boardElement;\r\n        var elements = document.body.getElementsByTagName(\"div\");\r\n        for (var i = 0; i < elements.length; i++) {\r\n            if (elements[i].className.indexOf(\"board-\") === 0) {\r\n                var element = elements[i];\r\n                if (element instanceof HTMLElement) {\r\n                    boardElement = element;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return boardElement;\r\n    };\r\n    AnalysisHelper.prototype.cleanColouredSquares = function (boardElement) {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var mods = element.attributes[\"modifications\"];\r\n        if (!mods) {\r\n            return;\r\n        }\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        var codes = mods.value.split(\",\");\r\n        for (var i = 0; i < codes.length; i++) {\r\n            searchLoop: for (var m = 0; m < 14; m++) {\r\n                for (var n = 0; n < 14; n++) {\r\n                    var element_1 = row[m].children[n];\r\n                    var ds = element_1.attributes[\"data-square\"];\r\n                    if (!ds || !(element_1 instanceof HTMLElement)) {\r\n                        continue;\r\n                    }\r\n                    if (ds.value !== codes[i]) {\r\n                        continue;\r\n                    }\r\n                    element_1.style.backgroundColor = null;\r\n                    break searchLoop;\r\n                }\r\n            }\r\n        }\r\n        element.removeAttribute(\"modifications\");\r\n    };\r\n    AnalysisHelper.prototype.clearCandidatesFromSquares = function (boardElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (element.attributes[\"attacks\"]) {\r\n                    element.removeAttribute(\"attacks\");\r\n                }\r\n                if (element.attributes[\"moves\"]) {\r\n                    element.removeAttribute(\"moves\");\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.createBoard = function (boardElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (!(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                var ds = element.attributes[\"data-square\"];\r\n                if (!ds) {\r\n                    continue;\r\n                }\r\n                var square = this.board.square(ds.value);\r\n                var child = this.getPieceElement(element.children);\r\n                if (!child) {\r\n                    continue;\r\n                }\r\n                var dp = child.attributes[\"data-piece\"];\r\n                if (!dp) {\r\n                    continue;\r\n                }\r\n                square.piece = Piece.create(dp.value, ds.value);\r\n            }\r\n        }\r\n    };\r\n    // go to every square on the board and if there is\r\n    // a piece on it, find out all the possible squares\r\n    // it can occupy and add the piece as a candidate\r\n    // (friend or enemy) to the current player\r\n    AnalysisHelper.prototype.analyseSquares = function (boardElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (!(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                var ds = element.attributes[\"data-square\"];\r\n                if (!ds) {\r\n                    continue;\r\n                }\r\n                var square = this.board.square(ds.value);\r\n                if (!square.accessible()) {\r\n                    continue;\r\n                }\r\n                var piece = square.piece;\r\n                if (!piece) {\r\n                    continue;\r\n                }\r\n                if (piece.player instanceof Dead) {\r\n                    continue;\r\n                }\r\n                this.checkRadius(boardElement, square);\r\n            }\r\n        }\r\n    };\r\n    // check all the squares the piece can occupy for a\r\n    // given radius from the piece's current location\r\n    // pieceSquare: the square that the piece whose \r\n    // radius we are checking is currently located\r\n    AnalysisHelper.prototype.checkRadius = function (boardElement, pieceSquare) {\r\n        this.checkAttackRadius(boardElement, pieceSquare);\r\n        this.checkMoveRadius(boardElement, pieceSquare);\r\n    };\r\n    AnalysisHelper.prototype.checkAttackRadius = function (boardElement, pieceSquare) {\r\n        var piece = pieceSquare.piece;\r\n        var vectors = piece.attacks();\r\n        for (;;) {\r\n            var radius = piece.radius.next();\r\n            var remaining = this.remaining(vectors);\r\n            if (radius.done || radius.value > 14 || remaining === 0) {\r\n                piece.radius.reset();\r\n                break;\r\n            }\r\n            for (var j = 0; j < vectors.length; j++) {\r\n                this.checkAttackVector(boardElement, pieceSquare, vectors[j], radius.value);\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.checkMoveRadius = function (boardElement, pieceSquare) {\r\n        var piece = pieceSquare.piece;\r\n        var vectors = piece.moves();\r\n        for (;;) {\r\n            var radius = piece.radius.next();\r\n            var remaining = this.remaining(vectors);\r\n            if (radius.done || radius.value > 14 || remaining === 0) {\r\n                piece.radius.reset();\r\n                break;\r\n            }\r\n            for (var j = 0; j < vectors.length; j++) {\r\n                this.checkMoveVector(boardElement, pieceSquare, vectors[j], radius.value);\r\n            }\r\n        }\r\n    };\r\n    // get the square for the given radius relating the\r\n    // vector representing the piece's direction of travel\r\n    // and rotate it depending on the piece's player\r\n    AnalysisHelper.prototype.checkAttackVector = function (boardElement, pieceSquare, vector, radius) {\r\n        if (vector[1]) {\r\n            var x1 = vector[0].x1(radius);\r\n            var y1 = vector[0].y1(radius);\r\n            var _a = pieceSquare.piece.player.rotate(pieceSquare.n, pieceSquare.m, x1, y1), x2 = _a[0], y2 = _a[1];\r\n            if (!this.board.valid(x2, y2)) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            var targetSquare = this.board.squares[y2][x2];\r\n            if (!targetSquare.accessible()) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            this.setAttackCandidate(boardElement, pieceSquare, targetSquare);\r\n            if (targetSquare.piece) {\r\n                vector[1] = false;\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.checkMoveVector = function (boardElement, pieceSquare, vector, radius) {\r\n        if (vector[1]) {\r\n            var x1 = vector[0].x1(radius);\r\n            var y1 = vector[0].y1(radius);\r\n            var _a = pieceSquare.piece.player.rotate(pieceSquare.n, pieceSquare.m, x1, y1), x2 = _a[0], y2 = _a[1];\r\n            if (!this.board.valid(x2, y2)) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            var targetSquare = this.board.squares[y2][x2];\r\n            if (!targetSquare.accessible()) {\r\n                vector[1] = false;\r\n                return;\r\n            }\r\n            if (!targetSquare.piece) {\r\n                this.setMoveCandidate(boardElement, pieceSquare, targetSquare);\r\n            }\r\n            else {\r\n                vector[1] = false;\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.setAttackCandidate = function (boardElement, pieceSquare, targetSquare) {\r\n        var element = this.getSquareElement(boardElement, targetSquare.code());\r\n        if (!element) {\r\n            return;\r\n        }\r\n        var attacks = element.attributes[\"attacks\"];\r\n        if (attacks) {\r\n            attacks.value = attacks.value + \",\" + pieceSquare.code();\r\n        }\r\n        else {\r\n            element.setAttribute(\"attacks\", pieceSquare.code());\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.setMoveCandidate = function (boardElement, pieceSquare, targetSquare) {\r\n        var element = this.getSquareElement(boardElement, targetSquare.code());\r\n        if (!element) {\r\n            return;\r\n        }\r\n        var moves = element.attributes[\"moves\"];\r\n        if (moves) {\r\n            moves.value = moves.value + \",\" + pieceSquare.code();\r\n        }\r\n        else {\r\n            element.setAttribute(\"moves\", pieceSquare.code());\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.getSquareElement = function (boardElement, code) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return undefined;\r\n        }\r\n        var squareElement;\r\n        rowLoop: for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                if (!(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                if (!element.classList.contains(\"square-\" + code)) {\r\n                    continue;\r\n                }\r\n                squareElement = element;\r\n                break rowLoop;\r\n            }\r\n        }\r\n        return squareElement;\r\n    };\r\n    AnalysisHelper.prototype.isTargetSquareValid = function (boardElement, originSquareElement, targetSquareElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return false;\r\n        }\r\n        var ds = originSquareElement.attributes[\"data-square\"];\r\n        if (!ds) {\r\n            return false;\r\n        }\r\n        var originSquare = this.board.square(ds.value);\r\n        var piece = originSquare.piece;\r\n        if (!piece) {\r\n            return false;\r\n        }\r\n        var codes;\r\n        if (piece.moves().length > 0) {\r\n            var moves = targetSquareElement.attributes[\"moves\"];\r\n            if (!moves) {\r\n                return false;\r\n            }\r\n            codes = moves.value.split(\",\");\r\n        }\r\n        else {\r\n            var attacks = targetSquareElement.attributes[\"attacks\"];\r\n            if (!attacks) {\r\n                return false;\r\n            }\r\n            codes = attacks.value.split(\",\");\r\n        }\r\n        if (codes.length === 0) {\r\n            return false;\r\n        }\r\n        if (codes.indexOf(ds.value) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    AnalysisHelper.prototype.colouriseSquares = function (boardElement, originSquareElement, targetSquareElement) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return;\r\n        }\r\n        this.colouriseMovementSquares(row, boardElement, originSquareElement);\r\n        if (!this.isTargetSquareValid(boardElement, originSquareElement, targetSquareElement)) {\r\n            return;\r\n        }\r\n        this.colouriseEnemySquares(row, targetSquareElement);\r\n    };\r\n    AnalysisHelper.prototype.colouriseMovementSquares = function (row, boardElement, originSquareElement) {\r\n        var dso = originSquareElement.attributes[\"data-square\"];\r\n        if (!dso) {\r\n            return;\r\n        }\r\n        var originSquare = this.board.square(dso.value);\r\n        var piece = originSquare.piece;\r\n        if (!piece) {\r\n            return;\r\n        }\r\n        for (var m = 0; m < 14; m++) {\r\n            for (var n = 0; n < 14; n++) {\r\n                var element = row[m].children[n];\r\n                var ds = element.attributes[\"data-square\"];\r\n                if (!ds || !(element instanceof HTMLElement)) {\r\n                    continue;\r\n                }\r\n                var square = this.board.square(ds.value);\r\n                if (square.piece) {\r\n                    if (square.piece.player.name.toLowerCase() === this.username) {\r\n                        continue;\r\n                    }\r\n                }\r\n                var moveCodes = void 0;\r\n                if (piece.moves().length !== 0) {\r\n                    var moves = element.attributes[\"moves\"];\r\n                    if (!moves) {\r\n                        continue;\r\n                    }\r\n                    moveCodes = moves.value.split(\",\");\r\n                }\r\n                else {\r\n                    var attacks_1 = element.attributes[\"attacks\"];\r\n                    if (!attacks_1) {\r\n                        continue;\r\n                    }\r\n                    moveCodes = attacks_1.value.split(\",\");\r\n                }\r\n                if (moveCodes.length === 0) {\r\n                    continue;\r\n                }\r\n                if (moveCodes.indexOf(dso.value) === -1) {\r\n                    continue;\r\n                }\r\n                var attackCodes = [];\r\n                var attacks = element.attributes[\"attacks\"];\r\n                if (attacks) {\r\n                    attackCodes = attacks.value.split(\",\");\r\n                }\r\n                var index = attackCodes.indexOf(dso.value);\r\n                if (index !== -1) {\r\n                    attackCodes.splice(index, 1);\r\n                }\r\n                var friendly = this.isFriendlySquare(boardElement, piece, attackCodes);\r\n                var colour = this.getColour(element, friendly);\r\n                element.style.backgroundColor = colour;\r\n                this.addCodeToModifiedSquares(ds.value);\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.colouriseEnemySquares = function (row, targetSquareElement) {\r\n        var attacks = targetSquareElement.attributes[\"attacks\"];\r\n        if (!attacks) {\r\n            return;\r\n        }\r\n        var codes = attacks.value.split(\",\");\r\n        if (codes.length == 0) {\r\n            return;\r\n        }\r\n        var dst = targetSquareElement.attributes[\"data-square\"];\r\n        if (!dst) {\r\n            return;\r\n        }\r\n        var index = codes.indexOf(dst.value);\r\n        if (index !== -1) {\r\n            codes.splice(index, 1);\r\n        }\r\n        for (var i = 0; i < codes.length; i++) {\r\n            searchLoop: for (var m = 0; m < 14; m++) {\r\n                for (var n = 0; n < 14; n++) {\r\n                    var element = row[m].children[n];\r\n                    var ds = element.attributes[\"data-square\"];\r\n                    if (!ds || !(element instanceof HTMLElement)) {\r\n                        continue;\r\n                    }\r\n                    if (ds.value !== codes[i]) {\r\n                        continue;\r\n                    }\r\n                    var square = this.board.square(ds.value);\r\n                    var piece = square.piece;\r\n                    if (!piece) {\r\n                        continue;\r\n                    }\r\n                    if (piece.player.name.toLowerCase() === this.username) {\r\n                        continue;\r\n                    }\r\n                    var colour = this.getColour(element, false);\r\n                    element.style.backgroundColor = colour;\r\n                    this.addCodeToModifiedSquares(ds.value);\r\n                    break searchLoop;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.isFriendlySquare = function (boardElement, piece, codes) {\r\n        var row = boardElement.children;\r\n        if (row.length < 14) {\r\n            return false;\r\n        }\r\n        var friends = 0;\r\n        var enemies = 0;\r\n        for (var i = 0; i < codes.length; i++) {\r\n            for (var m = 0; m < 14; m++) {\r\n                for (var n = 0; n < 14; n++) {\r\n                    var element = row[m].children[n];\r\n                    var ds = element.attributes[\"data-square\"];\r\n                    if (!ds || !(element instanceof HTMLElement)) {\r\n                        continue;\r\n                    }\r\n                    if (ds.value !== codes[i]) {\r\n                        continue;\r\n                    }\r\n                    var square = this.board.square(ds.value);\r\n                    var piece_1 = square.piece;\r\n                    if (!piece_1) {\r\n                        continue;\r\n                    }\r\n                    if (piece_1.player.name.toLowerCase() === this.username) {\r\n                        friends++;\r\n                    }\r\n                    else {\r\n                        enemies++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (friends === 0 && enemies === 0) {\r\n            return true;\r\n        }\r\n        return friends > enemies;\r\n    };\r\n    AnalysisHelper.prototype.getColour = function (element, friendly) {\r\n        var rgb;\r\n        var bgc = window\r\n            .getComputedStyle(element, null)\r\n            .getPropertyValue(\"background-color\");\r\n        if (bgc.indexOf(\"#\") === 0) {\r\n            rgb = this.hexToRgb(bgc);\r\n        }\r\n        if (bgc.indexOf(\"rgb\") === 0) {\r\n            var vals = bgc\r\n                .substring(4, bgc.length - 1)\r\n                .split(\", \");\r\n            rgb = {\r\n                r: parseInt(vals[0]),\r\n                g: parseInt(vals[1]),\r\n                b: parseInt(vals[2])\r\n            };\r\n        }\r\n        ;\r\n        if (friendly) {\r\n            return \"rgb(\" + rgb.r + \", 255, \" + rgb.b + \")\";\r\n        }\r\n        else {\r\n            return \"rgb(255, \" + rgb.g + \", \" + rgb.b + \")\";\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.addCodeToModifiedSquares = function (code) {\r\n        var element = document.getElementById(\"four-player-username\");\r\n        var mods = element.attributes[\"modifications\"];\r\n        if (mods) {\r\n            mods.value = mods.value + \",\" + code;\r\n        }\r\n        else {\r\n            element.setAttribute(\"modifications\", code);\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.show = function () {\r\n        for (var m = 0; m < 14; m++) {\r\n            var row = [\"|\"];\r\n            for (var n = 0; n < 14; n++) {\r\n                var square = this.board.squares[m][n];\r\n                if (square.accessible()) {\r\n                    row.push(square.piece ? square.piece.dp : \"[]\");\r\n                }\r\n                else {\r\n                    row.push(\"  \");\r\n                }\r\n            }\r\n            row.push(\"|\");\r\n            var s = this.board.squares;\r\n            console.log(row.join(\" \") +\r\n                \"%O %O %O %O %O %O %O %O %O %O %O %O %O %O |\", s[m][0], s[m][1], s[m][2], s[m][3], s[m][4], s[m][5], s[m][6], s[m][7], s[m][8], s[m][9], s[m][10], s[m][11], s[m][12], s[m][13]);\r\n        }\r\n    };\r\n    AnalysisHelper.prototype.getUsername = function () {\r\n        var username = document.getElementById(\"four-player-username\").innerText;\r\n        var elements = document.body.getElementsByClassName(\"player-avatar\");\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            if (!(element instanceof HTMLAnchorElement)) {\r\n                continue;\r\n            }\r\n            if (element.href.indexOf(username) === -1) {\r\n                continue;\r\n            }\r\n            var parent_1 = element.parentElement;\r\n            for (var j = 0; j < parent_1.classList.length; j++) {\r\n                for (var k = 0; k < this.colours.length; k++) {\r\n                    if (this.colours[k] !== parent_1.classList[j]) {\r\n                        continue;\r\n                    }\r\n                    return this.colours[k];\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    AnalysisHelper.prototype.hexToRgb = function (hex) {\r\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n            return r + r + g + g + b + b;\r\n        });\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    };\r\n    AnalysisHelper.prototype.remaining = function (moves) {\r\n        var remaining = 0;\r\n        for (var i = 0; i < moves.length; i++) {\r\n            if (moves[i][1]) {\r\n                remaining++;\r\n            }\r\n        }\r\n        return remaining;\r\n    };\r\n    AnalysisHelper.prototype.getPieceElement = function (elements) {\r\n        for (var i = 0; i < elements.length; i++) {\r\n            var element = elements[i];\r\n            if (element instanceof HTMLElement &&\r\n                element.className.indexOf(\"piece-\") === 0) {\r\n                return element;\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    return AnalysisHelper;\r\n}());\r\nexport { AnalysisHelper };\r\n","map":{"mappings":""}}
