{"code":"import { Knight } from \"./piece/knight\";\r\nimport { Bishop } from \"./piece/bishop\";\r\nimport { Queen } from \"./piece/queen\";\r\nimport { King } from \"./piece/king\";\r\nimport { Rook } from \"./piece/rook\";\r\nimport { Pawn } from \"./piece/pawn\";\r\nimport { Player } from \"./player\";\r\nimport { Square } from \"./square\";\r\nvar Piece = /** @class */ (function () {\r\n    function Piece(dp, code) {\r\n        this.coords = Square.coords(code);\r\n        this.player = Player.create(dp);\r\n        this.dp = dp;\r\n    }\r\n    Piece.prototype.moved = function () {\r\n        var moved = true;\r\n        for (var i = 0; i < this.home.length; i++) {\r\n            var m1 = this.home[i][0] - 6.5;\r\n            var n1 = this.home[i][1] - 6.5;\r\n            var _a = this.player.rotate(6.5, 6.5, n1, m1), x2 = _a[0], y2 = _a[1];\r\n            if (this.coords[1] === x2 &&\r\n                this.coords[0] === y2) {\r\n                moved = false;\r\n                break;\r\n            }\r\n        }\r\n        return moved;\r\n    };\r\n    Piece.create = function (dp, code) {\r\n        switch (dp.charAt(1)) {\r\n            case \"R\":\r\n                return new Rook(dp, code);\r\n            case \"P\":\r\n                return new Pawn(dp, code);\r\n            case \"K\":\r\n                return new King(dp, code);\r\n            case \"Q\":\r\n                return new Queen(dp, code);\r\n            case \"B\":\r\n                return new Bishop(dp, code);\r\n            case \"N\":\r\n                return new Knight(dp, code);\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n    return Piece;\r\n}());\r\nexport { Piece };\r\n","map":{"mappings":""}}
